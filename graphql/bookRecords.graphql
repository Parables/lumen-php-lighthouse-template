# Object Type
type BookRecord {
    id: ID!
    book: Book! @belongsTo
    student: Student! @belongsTo
    # recordedBy: User @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

# Input Type
input BookRecordCreateInput {
    book: BookOperation!
    student: StudentOperation!
    # recordedBy: UserOperation
}
# Input Type
input BookRecordUpdateInput {
    book: BookOperation
    student: StudentOperation
    # recordedBy: UserOperation
}
# Input Type
input BookRecordBookNestedInput {
    student: StudentOperation!
    # recordedBy: UserOperation
}
# Input Type
input BookRecordStudentNestedInput {
    book: BookOperation!
    # recordedBy: UserOperation
}

# Input Type
input BookRecordUserNestedInput {
    book: BookOperation!
    student: StudentOperation!
}

# # ********************
# # Single Nested Mutations
# input BookRecordOperation {
#     create: BookRecordInput
#     connect: ID
#     update: BookRecordInput
#     upsert: BookRecordInput
#     sync: ID
#     syncWithoutDetaching: ID
#     delete: ID
#     disconnect: ID
# }

# # List Nested Mutations
# input BookRecordOperations {
#     create: [BookRecordInput!]
#     connect: ID
#     update: [BookRecordInput!]
#     upsert: [BookRecordInput!]
#     sync: ID
#     syncWithoutDetaching: ID
#     delete: ID
#     disconnect: ID
# }
# # ********************




# ********************
# Single Book Nested Mutations
input BookRecordBookNestedOperation {
    create: BookRecordInput
    connect: ID
    update: BookRecordInput
    upsert: BookRecordInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Book Nested Mutations
input BookRecordBookNestedOperations {
    create: [BookRecordInput!]
    connect: ID
    update: [BookRecordInput!]
    upsert: [BookRecordInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}
# ********************



# ********************
# Single Student Nested Mutations
input BookRecordStudentNestedOperation {
    create: BookRecordInput
    connect: ID
    update: BookRecordInput
    upsert: BookRecordInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Student Nested Mutations
input BookRecordStudentNestedOperations {
    create: [BookRecordInput!]
    connect: ID
    update: [BookRecordInput!]
    upsert: [BookRecordInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}
# ********************



# ********************
# Single User Nested Mutations
input BookRecordUserNestedOperation {
    create: BookRecordInput
    connect: ID
    update: BookRecordInput
    upsert: BookRecordInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List User Nested Mutations
input BookRecordUserNestedOperations {
    create: [BookRecordInput!]
    connect: ID
    update: [BookRecordInput!]
    upsert: [BookRecordInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}
# ********************


# Query
extend type Query {
    bookRecord(id: Int! @eq): BookRecord @find
    bookRecords: [BookRecord!] @all
}

# Mutation
extend type Mutation {
    createBookRecord(input: BookRecordInput! @spread): BookRecord @create
    updateBookRecord(input: BookRecordInput! @spread): BookRecord @update
    upsertBookRecord(input: BookRecordInput! @spread): BookRecord @upsert
    deleteBookRecord(id: ID! @eq): BookRecord @delete
}
