# Object Type #
type BookRecord {
    id: ID!
    book: Book! @belongsTo
    student: Student! @belongsTo
    # TODO: Implement this
    # recordedBy: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type #
input BookRecordCreateInput {
    book: NestedBookCreateInput!
    student: NestedStudentCreateInput!
    # recordedBy: UserOperation!
}

# Update Input Type #
input BookRecordUpdateInput {
    id: ID!
    book: NestedBookUpdateInput
    student: NestedStudentUpdateInput
    # recordedBy: UserOperation
}

# Upsert Input Type #
input BookRecordUpsertInput {
    id: ID!
    book: NestedBookUpsertInput!
    student: NestedStudentUpsertInput!
    # recordedBy: UserOperation
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedBookRecordCreateInput {
    create: BookRecordCreateInput
    upsert: BookRecordUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedBookRecordUpdateInput {
    create: BookRecordCreateInput
    update: BookRecordUpdateInput
    upsert: BookRecordUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedBookRecordUpsertInput {
    create: BookRecordCreateInput
    upsert: BookRecordUpsertInput
    connect: ID
    sync: ID
}

# Nested List  Mutations
# Nested List Create Input #
input NestedBookRecordsCreateInput {
    create: [BookRecordCreateInput!]
    upsert: [BookRecordUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedBookRecordsUpdateInput {
    create: [BookRecordCreateInput!]
    update: [BookRecordUpdateInput!]
    upsert: [BookRecordUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedBookRecordsUpsertInput {
    create: [BookRecordCreateInput!]
    upsert: [BookRecordUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query
extend type Query {
    bookRecord(id: ID! @eq): BookRecord @find
    bookRecords: [BookRecord!] @all
}

# Mutation
extend type Mutation {
    createBookRecord(input: BookRecordCreateInput! @spread): BookRecord @create
    updateBookRecord(input: BookRecordUpdateInput! @spread): BookRecord @update
    upsertBookRecord(input: BookRecordUpsertInput! @spread): BookRecord @upsert
    deleteBookRecord(id: ID! @eq): BookRecord @delete
}
