# Object Type
type BookRecord {
    id: ID!
    book: Book! @belongsTo
    student: Student! @belongsTo
    # recordedBy: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

input BookRecordCreateInput {
    book: BookOperation!
    student: StudentOperation!
    # recordedBy: UserOperation!
}

input BookRecordUpdateInput {
    book: BookOperation
    student: StudentOperation
    # recordedBy: UserOperation
}

# ********************
# Input Type
input BookNestedBookRecordCreateInput {
    student: StudentOperation!
    # recordedBy: UserOperation!
}

input BookNestedBookRecordUpdateInput {
    student: StudentOperation
    # recordedBy: UserOperation
}

# List Book Nested Mutations
input BookRecordBookOperations {
    create: [BookNestedBookRecordCreateInput!]
    connect: [ID!]
    update: [BookNestedBookRecordUpdateInput!]
    upsert: [BookNestedBookRecordCreateInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}
# ********************

# ********************
# Input Type
input StudentNestedBookRecordCreateInput {
    book: BookOperation!
    # recordedBy: UserOperation!
}
input StudentNestedBookRecordUpdateInput {
    book: BookOperation
    # recordedBy: UserOperation
}

# List Student Nested Mutations
input BookRecordStudentOperations {
    create: [StudentNestedBookRecordCreateInput!]
    connect: [ID!]
    update: [StudentNestedBookRecordUpdateInput!]
    upsert: [StudentNestedBookRecordCreateInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}
# ********************

# ********************
# Input Type
input UserNestedBookRecordCreateInput {
    book: BookOperation!
    student: StudentOperation!
}

input UserNestedBookRecordUpdateInput {
    book: BookOperation!
    student: StudentOperation!
}

# List User Nested Mutations
input BookRecordUserOperations {
    create: [UserNestedBookRecordCreateInput!]
    connect: [ID!]
    update: [UserNestedBookRecordUpdateInput!]
    upsert: [UserNestedBookRecordCreateInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}
# ********************

# Query
extend type Query {
    bookRecord(id: Int! @eq): BookRecord @find
    bookRecords: [BookRecord!] @all
}

# Mutation
extend type Mutation {
    createBookRecord(input: BookRecordCreateInput! @spread): BookRecord @create
    updateBookRecord(input: BookRecordUpdateInput! @spread): BookRecord @update
    upsertBookRecord(input: BookRecordCreateInput! @spread): BookRecord @upsert
    deleteBookRecord(id: ID! @eq): BookRecord @delete
}
