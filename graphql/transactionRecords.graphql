# Object Type
type TransactionRecord {
    id: ID!
    receiptImageUrl: String
    transactionDate: DateTime!
    transactionID: String!
    transactionType: TransactionType!
    paymentMethod: SelectOption! @belongsTo
    amountPaid: Float!
    paidBy: Profile! @belongsTo
    description: String
    tag: SelectOption! @belongsTo
    # TODO: Implement this
    # recordedBy: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

enum TransactionType {
    CREDIT @enum
    DEBIT @enum
}

# Create Input Type
input CreateTransactionRecordInput {
    receiptImageUrl: String
    transactionDate: DateTime!
    transactionID: String!
    transactionType: TransactionType!
    paymentMethod: SelectOptionOperation!
    amountPaid: Float!
    paidBy: ProfileOperation!
    description: String
    tag: SelectOptionOperation!
}

# Update Input Type
input UpdateTransactionRecordInput {
    id: ID!
    receiptImageUrl: String
    transactionDate: DateTime
    transactionID: String
    transactionType: TransactionType
    paymentMethod: SelectOptionOperation
    amountPaid: Float
    paidBy: ProfileOperation
    description: String
    tag: SelectOptionOperation
}

# Upsert Input Type #
input UpsertTransactionRecordInput {
    id: ID!
    receiptImageUrl: String
    transactionDate: DateTime!
    transactionID: String!
    transactionType: TransactionType!
    paymentMethod: SelectOptionOperation!
    amountPaid: Float!
    paidBy: ProfileOperation!
    description: String
    tag: SelectOptionOperation!
}

# Single Nested Mutations
input TransactionRecordOperation {
    create: CreateTransactionRecordInput
    connect: ID
    update: UpdateTransactionRecordInput
    upsert: UpsertTransactionRecordInput
}

# List Nested Mutations
input TransactionRecordsOperation {
    create: [CreateTransactionRecordInput!]
    connect: [ID!]
    update: [UpdateTransactionRecordInput!]
    upsert: [UpsertTransactionRecordInput!]
#    sync: [ID!]
    syncWithoutDetaching: [ID!]
#    disconnect: [ID!]
}


# Query
extend type Query {
    transactionRecord(id: ID! @eq): TransactionRecord @find
    transactionRecords: [TransactionRecord!] @all
}

# Mutation
extend type Mutation {
    createTransactionRecord(
        input: CreateTransactionRecordInput! @spread
    ): TransactionRecord @create
    updateTransactionRecord(
        input: UpdateTransactionRecordInput! @spread
    ): TransactionRecord @update
    upsertTransactionRecord(
        input: UpsertTransactionRecordInput! @spread
    ): TransactionRecord @upsert
#    deleteTransactionRecord(id: ID! @eq): TransactionRecord @delete
}
