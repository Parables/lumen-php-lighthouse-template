type ProgrammeOutline {
    id: ID!
    programme: Programme! @belongsTo
    level: Int!
    semester: Int!
    course: Course! @belongsTo
    elective: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

input ProgrammeOutlineCreateInput {
    programme: ProgrammeOperation!
    level: Int!
    semester: Int!
    course: CourseOperation!
    elective: Boolean!
}

input ProgrammeOutlineUpdateInput {
    id: ID
    programme: ProgrammeOperation
    level: Int
    semester: Int
    course: CourseOperation
    elective: Boolean
}

# Single Nested Mutations
input ProgrammeOutlineOperation {
    create: ProgrammeOutlineCreateInput
    connect: ID
    update: ProgrammeOutlineUpdateInput
    upsert: ProgrammeOutlineCreateInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Nested Mutations
input ProgrammeOutlineOperations {
    create: [ProgrammeOutlineCreateInput!]
    connect: ID
    update: [ProgrammeOutlineUpdateInput!]
    upsert: [ProgrammeOutlineCreateInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Query
extend type Query {
    ProgrammeOutline(id: Int! @eq): ProgrammeOutline @find
    ProgrammeOutlines: [ProgrammeOutline!] @all
}

# Mutation
extend type Mutation {
    createProgrammeOutline(
        input: ProgrammeOutlineCreateInput! @spread
    ): ProgrammeOutline @create
    updateProgrammeOutline(
        input: ProgrammeOutlineUpdateInput! @spread
    ): ProgrammeOutline @update
    upsertProgrammeOutline(
        input: ProgrammeOutlineCreateInput! @spread
    ): ProgrammeOutline @upsert
    deleteProgrammeOutline(id: ID! @eq): ProgrammeOutline @delete
}
