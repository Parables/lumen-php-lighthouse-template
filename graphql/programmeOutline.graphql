# Object Type #
type ProgrammeOutline {
    id: ID!
    programme: Programme! @belongsTo
    level: Int!
    semester: Int!
    course: Course! @belongsTo
    elective: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type #
input ProgrammeOutlineCreateInput {
    programme: NestedProgrammeCreateInput!
    level: Int!
    semester: Int!
    course: NestedCourseCreateInput!
    elective: Boolean!
}

# Update Input Type #
input ProgrammeOutlineUpdateInput {
    id: ID!
    programme: NestedProgrammeUpdateInput
    level: Int
    semester: Int
    course: NestedCourseUpdateInput
    elective: Boolean
}

# Upsert Input Type #
input ProgrammeOutlineUpsertInput {
    id: ID!
    programme: NestedProgrammeUpsertInput!
    level: Int!
    semester: Int!
    course: NestedCourseUpsertInput!
    elective: Boolean
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedProgrammeOutlineCreateInput {
    create: ProgrammeOutlineCreateInput
    upsert: ProgrammeOutlineUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedProgrammeOutlineUpdateInput {
    create: ProgrammeOutlineCreateInput
    update: ProgrammeOutlineUpdateInput
    upsert: ProgrammeOutlineUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedProgrammeOutlineUpsertInput {
    create: ProgrammeOutlineCreateInput
    upsert: ProgrammeOutlineUpsertInput
    connect: ID
    sync: ID
}

# List Nested Mutations
# Nested List Create Input #
input NestedProgrammeOutlinesCreateInput {
    create: [ProgrammeOutlineCreateInput!]
    upsert: [ProgrammeOutlineUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedProgrammeOutlinesUpdateInput {
    create: [ProgrammeOutlineCreateInput!]
    update: [ProgrammeOutlineUpdateInput!]
    upsert: [ProgrammeOutlineUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedProgrammeOutlinesUpsertInput {
    create: [ProgrammeOutlineCreateInput!]
    upsert: [ProgrammeOutlineUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query
extend type Query {
    programmeOutline(id: ID! @eq): ProgrammeOutline @find
    programmeOutlines(programme: ID @eq): [ProgrammeOutline!] @all
}

# Mutation
extend type Mutation {
    createProgrammeOutline(
        input: ProgrammeOutlineCreateInput! @spread
    ): ProgrammeOutline @create
    updateProgrammeOutline(
        input: ProgrammeOutlineUpdateInput! @spread
    ): ProgrammeOutline @update
    upsertProgrammeOutline(
        input: ProgrammeOutlineUpsertInput! @spread
    ): ProgrammeOutline @upsert
    deleteProgrammeOutline(id: ID! @eq): ProgrammeOutline @delete
}
