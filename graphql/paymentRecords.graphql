# Object Type
type PaymentRecord {
    id: ID!
    receiptImageUrl: String
    transactionDate: DateTime!
    transactionID: String!
    bank: Bank!
    otherBankName: String
    amountPaid: Float!
    paidBy: Student! @belongsTo
    # TODO: Implement this
    # fee: Fee
    # recordedBy: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type
input PaymentRecordCreateInput {
    receiptImageUrl: String @trim
    transactionDate: DateTime!
    transactionID: String! @trim
    bank: Bank!
    otherBankName: String @trim
    amountPaid: Float!
    paidBy: StudentOperation!
    # recordedBy: UserOperation!
}

# Update Input Type
input PaymentRecordUpdateInput {
    id: ID!
    receiptImageUrl: String @trim
    transactionDate: DateTime
    transactionID: String @trim
    bank: Bank
    otherBankName: String @trim
    amountPaid: Float
    paidBy: StudentOperation
    # recordedBy: UserOperation
}

# Upsert Input Type #
input PaymentRecordUpsertInput {
    id: ID!
    receiptImageUrl: String @trim
    transactionDate: DateTime!
    transactionID: String @trim
    bank: Bank!
    otherBankName: String @trim
    amountPaid: Float!
    paidBy: StudentOperation!
    # recordedBy: UserOperation!
}

enum Bank {
    GCB @enum
    ADB @enum
    ZENITH @enum
    CBG @enum
    NIB @enum
    PRUDENTIAL @enum
    OTHER @enum
}


# Single Nested Mutations
input PaymentRecordOperation {
    create: PaymentRecordCreateInput
    connect: ID
    update: PaymentRecordUpdateInput
    upsert: PaymentRecordUpsertInput
}

# List Nested Mutations
input PaymentRecordsOperation {
    create: [PaymentRecordCreateInput!]
    connect: [ID!]
    update: [PaymentRecordUpdateInput!]
    upsert: [PaymentRecordUpsertInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    paymentRecord(id: ID! @eq): PaymentRecord @find
    paymentRecords(paidBy: ID @eq): [PaymentRecord!] @all
}

# Mutation
extend type Mutation {
    createPaymentRecord(input: PaymentRecordCreateInput! @spread): PaymentRecord @create
    updatePaymentRecord(input: PaymentRecordUpdateInput! @spread): PaymentRecord @update
    upsertPaymentRecord(input: PaymentRecordUpsertInput! @spread): PaymentRecord @upsert
    deletePaymentRecord(id: ID! @eq): PaymentRecord @delete
}
