# Object Type
type PaymentRecord {
    id: ID!
    receiptImage: String
    transactionDate: DateTime!
    transactionID: String!
    bank: Bank!
    branch: String!
    amountPaid: Float!
    paidBy: Student! @belongsTo
    # recordedBy: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type
input PaymentRecordCreateInput {
    receiptImage: String @trim
    transactionDate: DateTime!
    transactionID: String! @trim
    bank: Bank!
    branch: String! @trim
    amountPaid: Float!
    student: StudentOperation!
    # recordedBy: UserOperation
}

# Update Input Type
input PaymentRecordUpdateInput {
    id: ID
    receiptImage: String @trim
    transactionDate: DateTime
    transactionID: String @trim
    bank: Bank
    branch: String @trim
    amountPaid: Float
    student: StudentOperation
    # recordedBy: UserOperation
}

enum Bank {
    GCB @enum(value: "Ghana Commercial Bank")
    ADB @enum(value: "Agricultural Development Bank")
    ZENITH @enum(value: "Zenith Bank")
    CBG @enum(value: "Consolidated Bank Ghana LTD")
    NIB @enum(value: "National Investment Bank")
    PRUDENTIAL @enum(value: "Pudential Bank")
}

# Single Nested Mutations
input PaymentRecordOperation {
    create: PaymentRecordCreateInput
    connect: ID
    update: PaymentRecordUpdateInput
    upsert: PaymentRecordCreateInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Nested Mutations
input PaymentRecordOperations {
    create: [PaymentRecordCreateInput!]
    connect: ID
    update: [PaymentRecordUpdateInput!]
    upsert: [PaymentRecordCreateInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Query
extend type Query {
    paymentRecord(id: Int! @eq): PaymentRecord @find
    paymentRecords: [PaymentRecord!] @all
}

# Mutation
extend type Mutation {
    createPaymentRecord(
        input: PaymentRecordCreateInput! @spread
    ): PaymentRecord @create
    updatePaymentRecord(
        input: PaymentRecordUpdateInput! @spread
    ): PaymentRecord @update
    upsertPaymentRecord(
        input: PaymentRecordCreateInput! @spread
    ): PaymentRecord @upsert
    deletePaymentRecord(id: ID! @eq): PaymentRecord @delete
}
