# Object Type
type Lecturer {
    id: ID!
    profile: Profile! @belongsTo
    courses: [Course!] @hasMany
    # add more later
    # TODO: Implement Timetable
    # schedule(level: Int): [Schedule!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Input Type
input LecturerInput {
    id: ID
    profile: ProfileOperation
    courses: [CoursesOperation]
}

# Single Nested Mutations
input LecturerOperation {
    create: LecturerInput
    connect: ID
    update: LecturerInput
    upsert: LecturerInput

}

# List Nested Mutations
input LecturerOperations {
    create: [LecturerInput!]
    connect: ID
    update: [LecturerInput!]
    upsert: [LecturerInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID

}

# Query
extend type Query {
    lecturer(id: ID! @eq): Lecturer @find
    lecturers: [Lecturer!] @all
}

# Mutation
extend type Mutation {
    createLecturer(input: LecturerInput! @spread): Lecturer @create
    updateLecturer(input: LecturerInput! @spread): Lecturer @update
    upsertLecturer(input: LecturerInput! @spread): Lecturer @upsert
    deleteLecturer(id: ID! @eq): Lecturer @delete
}
