# Object Type #
type Enrollment {
    id: ID!
    student: Student! @belongsTo
    semester: SelectOption! @belongsTo
    level: Int!
    course: Course! @belongsTo
    booksGiven: [Book!] @hasMany
    enrollmentStatus: SelectOption! @belongsTo
    remarks: String
    enrolled_on: DateTime!
    completed_on: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}


# Create Input Type #
input CreateEnrollmentInput {
    student: StudentOperation!
    semester: SelectOptionOperation!
    level: Int!
    course: CourseOperation!
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation!
    remarks: String @trim
    enrolled_on: DateTime!
    completed_on: DateTime
}

# Create Input Type for Student
input CreateStudentEnrollmentInput {
    semester: SelectOptionOperation!
    level: Int!
    course: CourseOperation!
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation!
    remarks: String @trim
    enrolled_on: DateTime!
    completed_on: DateTime
}

# Update Input Type #
input UpdateEnrollmentInput {
    id: ID! @eq
    student: StudentOperation
    semester: SelectOptionOperation
    level: Int
    course: CourseOperation
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation
    remarks: String @trim
    enrolled_on: DateTime
    completed_on: DateTime
}

# Update Input Type for Student #
input UpdateStudentEnrollmentInput {
    id: ID! @eq
    semester: SelectOptionOperation
    level: Int
    course: CourseOperation
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation
    remarks: String @trim
    enrolled_on: DateTime
    completed_on: DateTime
}

# Upsert Input Type #
input UpsertEnrollmentInput {
    id: ID! @eq
    student: StudentOperation!
    semester: SelectOptionOperation!
    level: Int!
    course: CourseOperation!
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation!
    remarks: String @trim
    enrolled_on: DateTime!
    completed_on: DateTime
}

# Upsert Input Type for Student#
input UpsertStudentEnrollmentInput {
    id: ID! @eq
    semester: SelectOptionOperation!
    level: Int!
    course: CourseOperation!
    booksGiven: BooksOperation
    enrollmentStatus: SelectOptionOperation!
    remarks: String @trim
    enrolled_on: DateTime!
    completed_on: DateTime
}

# List Nested Mutations
input StudentEnrollmentsOperation {
    create: [CreateStudentEnrollmentInput!]
    connect: [ID!]
    update: [UpdateStudentEnrollmentInput!]
    upsert: [UpsertStudentEnrollmentInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query #
extend type Query {
    enrollment(id: ID! @eq): Enrollment @find
    enrollments: [Enrollment!]! @all
}

# Mutation #
extend type Mutation {
    createEnrollment(input: CreateEnrollmentInput! @spread): Enrollment @create
    updateEnrollment(input: UpdateEnrollmentInput! @spread): Enrollment @update
    upsertEnrollment(input: UpsertEnrollmentInput! @spread): Enrollment @upsert
    deleteEnrollment(id: ID! @eq): Enrollment @delete
}
