# Object Type
type Person {
   # TODO: Create Account Type to replace user
    # A person can have more than one account
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String!
    lastName: String!
    firstName: String!
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
    contact: ContactInfo # TODO: Implement this
    created_at: DateTime!
    updated_at: DateTime!
}

enum Gender {
    FEMALE @enum(value: "female")
    MALE @enum(value: "male")
}

enum MaritalStatus {
    MARRIED @enum(value: "Married")
    DIVORCED @enum(value: "Divored")
    SEPARATED @enum(value: "Separated")
    SINGLE @enum(value: "Single")
    ENGAGED @enum(value: "Engaged")
    WIDOW @enum(value: "Widow")
    WIDOWER @enum(value: "Widower")
    DATING @enum(value: "Dating")
}


# Create Input Type
input PersonCreateInput {
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
    contacts: PersonContactsCreateOperation
}

input ContactPersonCreateInput {
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
}

# Update Input Type
input PersonUpdateInput {
    id: ID!
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
    contacts: PersonContactsUpdateOperation
}

input ContactPersonUpdateInput {
    id: ID!
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
}

# Upsert Input Type #
input PersonUpsertInput {
    id: ID!
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
    contacts:PersonContactsUpsertInput
}

input ContactPersonUpsertInput {
    id: ID!
    # accounts: [Account] @hasMany
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: MaritalStatus
}

#  Single  Mutations

#  Single Create Input #
input PersonCreateOperation {
    create: PersonCreateInput
    upsert: PersonUpsertInput
    connect: ID
    sync: ID
}

input ContactPersonCreateOperation {
    create: ContactPersonCreateInput
    upsert: ContactPersonUpsertInput
    connect: ID
    sync: ID
}

#  Single Update Input #
input PersonUpdateOperation {
    create: PersonCreateInput
    update: PersonUpdateInput
    upsert: PersonUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

input ContactPersonUpdateOperation {
    create: ContactPersonCreateInput
    update: ContactPersonUpdateInput
    upsert: ContactPersonUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}
#  Single Upsert Input #
input PersonUpsertOperation {
    create: PersonCreateInput
    upsert: PersonUpsertInput
    connect: ID
    sync: ID
}

input ContactPersonUpsertOperation {
    create: ContactPersonCreateInput
    upsert: ContactPersonUpsertInput
    connect: ID
    sync: ID
}
# List  Mutations
#  List Create Input #
# input PersonsCreateInput {
#     create: [PersonCreateInput!]
#     upsert: [PersonUpsertInput!]
#     connect: [ID!]
#     sync: [ID!]
# }

# #  List Update Input #
# input PersonsUpdateInput {
#     create: [PersonCreateInput!]
#     update: [PersonUpdateInput!]
#     upsert: [PersonUpsertInput!]
#     connect: [ID!]
#     sync: [ID!]
#     syncWithoutDetaching: [ID!]
#     delete: [ID!]
#     disconnect: [ID!]
# }

# #  List Upsert Input #
# input PersonsUpsertInput {
#     create: [PersonCreateInput!]
#     upsert: [PersonUpsertInput!]
#     connect: [ID!]
#     sync: [ID!]
# }

# Query
extend type Query {
    person(id: ID! @eq): Person @find
    people: [Person!] @all
}

# Mutation
extend type Mutation {
    createPerson(input: PersonCreateInput! @spread): Person @create
    updatePerson(input: PersonUpdateInput! @spread): Person @update
    upsertPerson(input: PersonUpsertInput! @spread): Person @upsert
    deletePerson(id: ID! @eq): Person @delete
}
