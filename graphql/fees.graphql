# Object Type #
type Fee {
    id: ID!
    type: SelectOption!
    description: String
    amountPayable: Float!
    paymentCycle: SelectOption!
    paymentMethod: SelectOption!
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type #
input CreateFeeInput {
    type: SelectOptionsOperation!
    description: String @trim
    amountPayable: Float!
    paymentCycle: SelectOptionsOperation!
    paymentMethod: SelectOptionsOperation!
}

# Update Input Type #
input UpdateFeeInput {
    id: ID!
    type: SelectOptionsOperation!
    description: String @trim
    amountPayable: Float
    paymentCycle: SelectOptionsOperation
    paymentMethod: SelectOptionsOperation
}

# Upsert Input Type #
input UpsertFeeInput {
    id: ID!
    type: SelectOptionsOperation!
    description: String @trim
    amountPayable: Float!
    paymentCycle: SelectOptionsOperation!
    paymentMethod: SelectOptionsOperation!
}

# Single Nested Mutations
input FeeOperation {
    create: CreateFeeInput
    connect: ID
    update: UpdateFeeInput
    upsert: UpsertFeeInput
}

# List Nested Mutations
input FeesOperation {
    create: [CreateFeeInput!]
    connect: [ID!]
    update: [UpdateFeeInput!]
    upsert: [UpsertFeeInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}


extend type Query {
    fee(id: ID! @eq): Fee @find
    fees: [Fee] @all
}

extend type Mutation {
    createFee(input: CreateFeeInput! @spread): Fee @create
    updateFee(input: UpdateFeeInput! @spread): Fee @update
    upsertFee(input: UpsertFeeInput! @spread): Fee @upsert
    deleteFee(id: ID! @eq): Fee @delete
}
