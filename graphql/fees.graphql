# Object Type #
type Fee {
    id: ID!
    type: FeeType!
    otherType: String
    description: String
    amountPayable: Float!
    paymentCycle: PaymentCycle
    paymentMethod: PaymentMethod
    otherPaymentMethod: String
    created_at: DateTime!
    updated_at: DateTime!
}

enum  FeeType{
    SCHOOL_FEES @enum
    DEPARTMENTAL_FEES @enum
    SRC_DUES @enum
    EXTRA_CURICULUM_FEES @enum
    OTHER @enum
}

enum PaymentCycle {
    ANNUAL @enum
    BI_ANNUAL @enum
    TRI_ANNUAL @enum
    QUARTERLY @enum
    MONTHLY @enum
    WEEKLY @enum
    DIALY @enum
    PAY_AS_YOU_GO @enum
    ONE_TIME @enum
}

enum PaymentMethod {
    TRANSFLOW @enum
    BANKERS_DRAFT @enum
    CHEQUE @enum
    MOBILE_TRANSFER @enum
    ACCOUNT_TRANSFER @enum
    CASH_DEPOSIT @enum
    CASH_PAYMENT @enum
    OTHER @enum
}

# Create Input Type #
input CreateFeeInput {
    type: FeeType!
    otherType: String
    description: String @trim
    amountPayable: Float!
    paymentCycle: PaymentCycle!
    paymentMethod: PaymentMethod!
    otherPaymentMethod: String
}

# Update Input Type #
input UpdateFeeInput {
    id: ID!
    type: FeeType
    otherType: String
    description: String @trim
    amountPayable: Float
    paymentCycle: PaymentCycle
    paymentMethod: PaymentMethod
    otherPaymentMethod: String @trim
}

# Upsert Input Type #
input UpsertFeeInput {
    id: ID!
    type: FeeType!
    otherType: String
    description: String @trim
    amountPayable: Float!
    paymentCycle: PaymentCycle!
    paymentMethod: PaymentMethod!
    otherPaymentMethod: String @trim
}

# Single Nested Mutations
input FeeOperation {
    create: CreateFeeInput
    connect: ID
    update: UpdateFeeInput
    upsert: UpsertFeeInput
}

# List Nested Mutations
input FeesOperation {
    create: [CreateFeeInput!]
    connect: [ID!]
    update: [UpdateFeeInput!]
    upsert: [UpsertFeeInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}


extend type Query {
    fee(id: ID! @eq): Fee @find
    fees: [Fee] @all
}

extend type Mutation {
    createFee(input: CreateFeeInput! @spread): Fee @create
    updateFee(input: UpdateFeeInput! @spread): Fee @update
    upsertFee(input: UpsertFeeInput! @spread): Fee @upsert
    deleteFee(id: ID! @eq): Fee @delete
}
