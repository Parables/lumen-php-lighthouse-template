# TODO: Implement this with Categories/Groups
# Object Type
type SelectOption {
    id: ID!
    fieldName: String!
    parentID: ID
    name: String
    label: String
    value: String!
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type
input CreateSelectOptionInput {
    fieldName: String!
    parentID: ID
    name: String
    label: String
    value: String!
}

# Update Input Type
input UpdateSelectOptionInput {
    id: ID!
    fieldName: String
    parentID: ID
    name: String
    label: String
    value: String
}

# Upsert Input Type
input UpsertSelectOptionInput {
    fieldName: String!
    parentID: ID
    name: String
    label: String
    value: String!
}

# Single Nested Mutations
input SelectOptionOperation {
    create: CreateSelectOptionInput
    connect: ID
    update: UpdateSelectOptionInput
    upsert: UpsertSelectOptionInput
}

# List Nested Mutations
input SelectOptionsOperation {
    create: [CreateSelectOptionInput!]
    connect: [ID]
    update: [UpdateSelectOptionInput!]
    upsert: [UpsertSelectOptionInput!]
    sync: [ID]
    syncWithoutDetaching: [ID]
    delete: [ID]
}

# Query
extend type Query {
    selectOption(id: ID! @eq): SelectOption @find
    selectOptions(fieldName: String! @eq, parentID: ID @eq): [SelectOption!] @all
childrenSelectOptions(id: ID @eq): [SelectOption!]  @field(resolver: "SelectOption@childrenOptions")
}

# Mutation
extend type Mutation {
    createSelectOption(input: CreateSelectOptionInput! @spread): SelectOption
        @create
    updateSelectOption(input: UpdateSelectOptionInput! @spread): SelectOption
        @update
    upsertSelectOption(input: CreateSelectOptionInput! @spread): SelectOption
        @upsert
    deleteSelectOption(id: ID! @eq): SelectOption @delete
}
