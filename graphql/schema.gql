# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BookInput {
  """objectID for the book"""
  _id: String

  """title of the book"""
  title: String!

  """image url for the book"""
  cover: String

  """unique code interchangeble with course code"""
  bookCode: String

  """author of the book"""
  author: String

  """book creation date"""
  inStock: Int = 0
}

type BooksGiven {
  """the level of the student"""
  level: Float!

  """list of books given to the student at this level"""
  books: [BookType!]!
}

input BooksGivenInput {
  """the level of the student"""
  level: Float!

  """list of books given to the student at this level"""
  books: [ID!]!
}

"""a Book entity in the Database"""
type BookType {
  """objectID for the book"""
  _id: ID!

  """title of the book"""
  title: String!

  """image url for the book"""
  cover: String

  """unique code interchangeble with course code"""
  bookCode: String

  """author of the book"""
  author: String

  """quantity of book available"""
  inStock: Int

  """book creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

"""contact information of the person"""
input ContactInput {
  """list of phone numbers of the person"""
  phoneNumbers: [Int!]!

  """list of emails of the person"""
  emails: [String!]!

  """list of addresses of the person"""
  addresses: [String!]!
}

"""
the contact contains the phone number(s), email(s) and address(es) of the person
"""
type ContactType {
  """list of phone numbers of the person"""
  phoneNumbers: [String!]!

  """list of emails of the person"""
  emails: [String!]!

  """list of addresses of the person"""
  addresses: [String!]!
}

input CourseInput {
  """objectID for the course"""
  _id: String

  """title of the course"""
  title: String!

  """unique short code for course. Also used a in place book code"""
  courseCode: String!

  """hours taugth per session"""
  creditHours: Int = 3

  """list of books used for this course"""
  books: [ID!] = []

  """list of lecturers who can teach this course"""
  lecturers: [ID!] = []
}

"""a Course entity in the Database"""
type CourseType implements ICourseType {
  """objectID for the course"""
  _id: ID!

  """title of the course"""
  title: String!

  """unique short code/abbreviation used to identify the course"""
  courseCode: String!

  """hours taugth per meeting"""
  creditHours: Int

  """list of books used for this course"""
  books: [BookType!]

  """list of lecturers who can teach this course"""
  lecturers: [LecturerType!]

  """course creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

"""self explanatory"""
enum Gender {
  MALE
  FEMALE
}

"""a Course entity in the Database"""
interface ICourseType {
  """objectID for the course"""
  _id: ID!

  """title of the course"""
  title: String!

  """unique short code/abbreviation used to identify the course"""
  courseCode: String!

  """hours taugth per meeting"""
  creditHours: Int

  """list of books used for this course"""
  books: [BookType!]

  """list of lecturers who can teach this course"""
  lecturers: [LecturerType!]

  """course creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

input LecturerInput {
  """objectID for the lecturer"""
  _id: String

  """url to the image of the lecturer"""
  avartar: String

  """surname of the lecturer"""
  surname: String!

  """more names of the lecturer in order [firstName, middleName, ..]"""
  otherNames: String!

  """date of birth for the lecturer"""
  dob: String

  """self explanatory"""
  gender: Gender!

  """add contact info"""
  contact: ContactInput

  """date of birth for the lecturer"""
  qualification: String

  """list of courses taught by the lecturer"""
  courses: [ID!]
}

"""a Lecturer entity in the Database"""
type LecturerType {
  """objectID for the lecturer"""
  _id: ID!

  """url to the image of the lecturer"""
  avartar: String!

  """surname of the lecturer"""
  surname: String!

  """more names of the lecturer in order [firstName, middleName, ..]"""
  otherNames: String!

  """date of birth for the lecturer"""
  dob: String!

  """self explanatory"""
  gender: Gender!

  """add contact info"""
  contact: ContactType

  """date of birth for the lecturer"""
  qualification: String!

  """list of courses taught by the lecturer"""
  courses: [CourseType!]!

  """lecturer creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

type Mutation {
  """creates a new book"""
  createBook(
    """creates a new book from this data"""
    bookInput: BookInput!
  ): BookType!

  """finds a book by id and updates it"""
  updateBook(
    """create the course if it doesn't exit"""
    upsert: Boolean

    """timestamp of when the changes were made"""
    timestamp: Int!

    """updates book with this data"""
    bookInput: BookInput!
  ): BookType!

  """finds a book by id and deletes it"""
  deleteBook(
    """objectID of the book to be deleted"""
    bookID: String!
  ): BookType!

  """create a new course"""
  createCourse(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """creates a new course from this data"""
    courseInput: CourseInput!
  ): CourseType!

  """finds a course by id and updates it"""
  updateCourse(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """create the course if it doesn't exit"""
    upsert: Boolean

    """timestamp of when the changes were made"""
    timestamp: Int!

    """updates course with this data"""
    courseInput: CourseInput!
  ): CourseType!

  """finds a course by id and deltes it"""
  deleteCourse(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """objectID of the course to be updated"""
    courseID: String!
  ): CourseType!

  """create a new lecturer"""
  createLecturer(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """creates lecturer from this data"""
    lecturerInput: LecturerInput!
  ): LecturerType!

  """finds a lecturer by id and updates it"""
  updateLecturer(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """timestamp of when the changes were made"""
    timestamp: Int!

    """updates lecturer with this data"""
    lecturerInput: LecturerInput!
  ): LecturerType!

  """finds a lecturer by id and updates it"""
  deleteLecturer(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """objectID of the lecturer to be updated"""
    lecturerID: String!
  ): LecturerType!

  """create a new programme"""
  createProgramme(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """creates programme from this data"""
    programmeInput: ProgrammeInput!
  ): ProgrammeType!

  """finds a programme by id and updates it"""
  updateProgramme(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """timestamp of when the changes were made"""
    timestamp: Float = 1609177792288

    """updates programme with this data"""
    programmeInput: ProgrammeInput!
  ): ProgrammeType!

  """finds a programme by id and updates it"""
  deleteProgramme(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """objectID of the programme to be updated"""
    programmeID: String!
  ): ProgrammeType!

  """create a new student"""
  createStudent(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """creates student from this data"""
    studentInput: StudentInput!
  ): StudentType!

  """finds a student by id and updates it"""
  updateStudent(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """timestamp of when the changes were made"""
    timestamp: Int!

    """updates student with this data"""
    studentInput: StudentInput!
  ): StudentType!

  """finds a student by id and updates it"""
  deleteStudent(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """objectID of the student to be updated"""
    studentID: String!
  ): StudentType!
}

input ProgrammeInput {
  """a unique identifier"""
  _id: ID

  """name of the programme"""
  title: String

  """unique short code to identify the programme"""
  programmeCode: String = ""

  """this is the entry level for the programme"""
  startLevel: Int

  """the programme completion level"""
  endLevel: Int

  """outline of courses for the programme"""
  outline: [ProgrammeOutlineInput!] = []
}

"""add an outline of courses for the programme"""
type ProgrammeOutline {
  """a course to be taken during this programme"""
  course: CourseType!

  """is this course an elective course?"""
  elective: Boolean

  """what level is this couse taken"""
  level: Int!

  """what semester is this course taken"""
  semester: Int
}

input ProgrammeOutlineInput {
  """a course to be taken during this programme"""
  course: String!

  """is this course an elective course?"""
  elective: Boolean = false

  """what level is this couse taken"""
  level: Int!

  """what semester is this course taken"""
  semester: Int!
}

"""A Programme offered by the centre or university"""
type ProgrammeType {
  """a unique identifier"""
  _id: ID!

  """name of the programme"""
  title: String!

  """unique short code to identify the programme"""
  programmeCode: String

  """this is the entry level for the programme"""
  startLevel: Int!

  """the programme completion level"""
  endLevel: Int!

  """outline of courses for the programme"""
  outline: [ProgrammeOutline!]

  """creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

type Query {
  """find a book by ID"""
  book(bookID: String!): BookType!

  """
  returns all books if title not is provided or books that matches the title
  """
  allBooks(
    """title of the book"""
    title: String
  ): [BookType!]!

  """find a course by ID"""
  course(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false
    courseID: String!
  ): CourseType!

  """
  returns all courses if title not is provided or courses that matches the title
  """
  allCourses(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """title of the course"""
    title: String
  ): [CourseType!]!
  lecturer(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false
    lecturerID: String!
  ): LecturerType!

  """Returns lecturers that matches the name or an list of all lecturers"""
  allLecturers(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """return a list of lecturers that matches this text"""
    searchText: String = ""
  ): [LecturerType!]!
  programme(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false
    programmeID: String!
  ): ProgrammeType!

  """Returns programmes that matches the title or an list of all programmes"""
  allProgrammes(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """title of the programme"""
    title: String
  ): [ProgrammeType!]!
  student(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false
    studentID: String!
  ): StudentType!

  """Returns students that matches the name or an list of all students"""
  allStudents(
    """if true, returns with all refs populated, Default: false"""
    shouldPopulate: Boolean = false

    """return a list of students that matches this text"""
    searchText: String = ""
  ): [StudentType!]!
}

input StudentInput {
  """objectID for the student"""
  _id: String!

  """url to the image of the student"""
  avartar: String = ""

  """academic year enrolled"""
  academicYear: String!

  """application ID of the student"""
  applicationID: String!

  """
  exams/index number of the student... Use applicationID if exams/index number is not available 
  """
  examsNumber: String!

  """programme offered by the student"""
  programme: String!

  """current level of the student"""
  currentlevel: Int!

  """surname of the student"""
  surname: String!

  """more names of the student in order [firstName, middleName, ..]"""
  otherNames: String!

  """date of birth for the student"""
  dob: String = ""

  """self explanatory"""
  gender: Gender!

  """add contact info"""
  contact: ContactInput

  """list of books given to the student at every level"""
  booksGiven: [BooksGivenInput!] = []
}

"""a Student entity in the Database"""
type StudentType {
  """objectID for the student"""
  _id: ID!

  """url to the image of the student"""
  avartar: String

  """academic year enrolled"""
  academicYear: String!

  """application ID of the student"""
  applicationID: String!

  """
  exams/index number of the student... Use applicationID if exams/index number is not available 
  """
  examsNumber: String!

  """programme of the student"""
  programme: ProgrammeType!

  """current level of the student"""
  currentlevel: Int!

  """surname of the student"""
  surname: String!

  """more names of the student in order [firstName, middleName, ..]"""
  otherNames: String!

  """date of birth for the student"""
  dob: String

  """self explanatory"""
  gender: Gender!

  """add contact info"""
  contact: ContactType

  """list of books given to the student at every level"""
  booksGiven: [BooksGiven!]

  """student creation date"""
  createdAt: String!

  """last updated date"""
  updatedAt: String!
}

"""the response of a bulk upload request"""
type UploadResult {
  """contains the entityInput object"""
  complete: Boolean!

  """timestamp used to track stale update changes"""
  count: Float!
}
