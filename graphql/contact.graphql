type Contact {
    profile: Profile @belongsTo
    contactType: SelectOption! @belongsTo
    contactValue: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

type ContactInfo {
    phone: [ContactTypeInfo]
    email: [ContactTypeInfo]
    address: [ContactTypeInfo]
    social_media: [ContactTypeInfo]
    website: [ContactTypeInfo]
    others: [ContactTypeInfo]
}

type ContactTypeInfo {
    value: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

# Create Input Type
input CreateContactInput {
    profile: ProfileOperation!
    contactType: SelectOptionOperation!
    contactValue: String! @trim
}

# Create Input Type for Profile
input CreateProfileContactInput {
    contactType: SelectOptionOperation!
    contactValue: String! @trim
}

# Create Input Type
input UpdateContactInput {
    id: ID!
    profile: ProfileOperation
    contactType: SelectOptionOperation
    contactValue: String @trim
}

#  Create Input Type for Profile
input UpdateProfileContactInput {
    id: ID!
    contactType: SelectOptionOperation
    contactValue: String @trim
}

input UpsertContactInput {
    id: ID!
    profile: ProfileOperation!
    contactType: SelectOptionOperation!
    contactValue: String! @trim
}

input UpsertProfileContactInput {
    id: ID!
    contactType: SelectOptionOperation!
    contactValue: String! @trim
}

# List Create Input #
input ContactsOperation {
    create: [CreateContactInput!]
    connect: [ID!]
    update: [UpdateContactInput!]
    upsert: [UpsertContactInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

input ProfileContactsOperation {
    create: [CreateProfileContactInput!]
    connect: [ID!]
    update: [UpdateProfileContactInput!]
    upsert: [UpsertProfileContactInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    contact(id: ID! @eq): Contact @find
    contacts: [Contact!] @all
    contactInfo(profileID: ID! @eq): ContactInfo @field(resolver: "ContactInfo")
}

# Mutation
extend type Mutation {
    createContact(input: CreateContactInput! @spread): Contact @create
    updateContact(input: UpdateContactInput! @spread): Contact @update
    upsertContact(input: UpsertContactInput! @spread): Contact @upsert
    deleteContact(id: ID! @eq): Contact @delete
}



