type Contact {
    id: ID!
    phone: String!
    email: String!
    location: String
    digitalAddress: String
    postalAddress: String
}

# Create Input Type
input ContactCreateInput {
    phone: String! @trim
    email: String! @trim
    location: String @trim
    digitalAddress: String @trim
    postalAddress: String @trim
}

# Update Input Type
input ContactUpdateInput {
    id: ID!
    phone: String @trim
    email: String @trim
    location: String @trim
    digitalAddress: String @trim
    postalAddress: String @trim
}

# Single Nested Mutations
input ContactOperation {
    create: ContactCreateInput
    connect: ID
    update: ContactUpdateInput
    upsert: ContactCreateInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Query
extend type Query {
    contact(id: Int! @eq): Contact @find
    contacts: [Contact!] @all
}

# Mutation
extend type Mutation {
    createContact(input: ContactCreateInput! @spread): Contact @create
    updateContact(input: ContactUpdateInput! @spread): Contact @update
    upsertContact(input: ContactCreateInput! @spread): Contact @upsert
    deleteContact(id: ID! @eq): Contact @delete
}
