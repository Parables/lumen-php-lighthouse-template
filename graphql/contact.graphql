type Contact {
    id: ID!
    surname: String!
    otherNames: String!
    picture: String!
    # profile: Profile! @belongsTo
    # groups: [Group!]
    phones: [Phone] @hasMany
    emails: [Email] @hasMany
    address: [Address] @hasMany
}

# Input Type
input ContactInput {
    id: ID
    surname: String
    otherNames: String
    picture: String
    # profile: ProfileOperation
    # groups: GroupOperations
    phones: [PhoneOperations]
    emails: [EmailOperations]
    address: [AddressOperations]
}

# Single Nested Mutations
input ContactOperation {
    create: ContactInput!
    connect: ID!
    update: ContactInput!
    upsert: ContactInput!
    sync: ID!
    syncWithoutDetaching: ID!
    delete: ID!
    disconnect: ID!
}

# List Nested Mutations
input ContactOperations {
    create: [ContactInput!]
    connect: ID!
    update: [ContactInput!]
    upsert: [ContactInput!]
    sync: ID!
    syncWithoutDetaching: ID!
    delete: ID!
    disconnect: ID!
}

# Query
extend type Query {
    contact(id: Int! @eq): Contact @find
    contacts: [Contact!] @all
}

# Mutation
extend type Mutation {
    createContact(input: ContactInput! @spread): Contact @create
    updateContact(input: ContactInput! @spread): Contact @update
    upsertContact(input: ContactInput! @spread): Contact @upsert
    deleteContact(id: ID! @eq): Contact @delete
}
