type Contact {
    id: ID!
    person: Person @belongsTo
    contact_type: ContactType!
    contact_value: String!
    contact_tags: ContactTag!
    created_at: DateTime!
    updated_at: DateTime!
}

enum ContactType {
    PHONE @enum(value: "phone")
    EMAIL @enum(value: "email")
    ADDRESS @enum(value: "address")
    SOCIAL_MEDIA  @enum(value: "social_media")
    WEBSITE @enum(value: "website")
}

enum ContactTag {
    PHONE @enum(value: "phone")
    EMAIL @enum(value: "email")
    POSTAL_ADDRESS @enum(value: "postalAddress")
    DIGITAL_ADDRESS @enum(value: "digitalAddress")
    ADDRESSS @enum(value: "Address")
    SM_TWITTER @enum(value: "twitter")
    SM_FACEBOOK @enum(value: "facebook")
    SM_INSTAGRAM @enum(value: "instagram")
    SM_YOUTUBE @enum(value: "youtube")
    SM_LINKEDIN @enum(value: "linkedin")
    SM_GITHUB @enum(value: "github")
    WEBSITE @enum(value: "website")
}

type ContactInfo {
    phones: [String] # [Phone]
    emails: [String] # [Email]
    address: String # [Address]
    social_media: String # [SocialMedia]
    websites: String # [Website]
}

# Create Input Type
input CreateContactInput {
    person: PersonCreateOperation!
    contact_type: ContactType!
    contact_value: String! @trim
    contact_tags: ContactTag! @trim
}

# Input for person @hasMany contacts
input CreateContactsInput {
    contact_type: ContactType!
    contact_value: String! @trim
    contact_tags: ContactTag! @trim
}


# List Create Input #

# Person  List Create Input #
input ContactsCreateOperation {
    create: [CreateContactsInput!]
    # upsert: [PersonContactsUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}


# Query
extend type Query {
    contact(id: ID! @eq): Contact @find
    contacts: [Contact!] @all
    contactInfo(personID:ID @eq): ContactInfo @field(resolver: "ContactInfo" )
}

# Mutation
extend type Mutation {
    createContact(input: CreateContactInput! @spread): Contact @create
    # updateContact(input: ContactUpdateInput! @spread): Contact @update
    # upsertContact(input: CreateContactInput! @spread): Contact @upsert
    # deleteContact(id: ID! @eq): Contact @delete
}
