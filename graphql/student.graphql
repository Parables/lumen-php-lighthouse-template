# Object Type
type Student {
    id: ID!
    applicationID: String!
    examsNumber: String!
    profile: Profile! @belongsTo
    academicYear: String!
    programme: Programme! @belongsTo
    startLevel: Int!
    currentLevel: Int!
    endLevel: Int!
    paymentRecords: [PaymentRecord!] @hasMany
    enrollments: [Enrollment!] @hasMany
    remarks: String
    admissionStatus: SelectOption @belongsTo
    admitted_on: DateTime!
    completed_on: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
    # add more later
    # TODO: implement these
    ## groups: [Category!] @belongsToMany
    # schedules: [Schedule!] @hasMany
    # friends: Students
    # collegues: Students
}

# Create Input Type
input CreateStudentInput {
    applicationID: String! @trim
    examsNumber: String!  @trim
    profile: ProfileOperation!
    academicYear: String!  @trim
    programme: ProgrammeOperation!
    startLevel: Int!
    currentLevel: Int!
    endLevel: Int!
    paymentRecords: PaymentRecordsOperation
    enrollments: StudentEnrollmentsOperation
    remarks: String  @trim
    admissionStatus: SelectOptionOperation
    admitted_on: DateTime!
    completed_on: DateTime
}

# Update Input Type
input UpdateStudentInput {
    id: ID!
    applicationID: String @trim
    examsNumber: String @trim
    profile: ProfileOperation
    academicYear: String @trim
    programme: ProgrammeOperation
    startLevel: Int
    currentLevel: Int
    endLevel: Int
    paymentRecords: PaymentRecordsOperation
    enrollments: StudentEnrollmentsOperation
    remarks: String @trim
    admissionStatus: SelectOptionOperation
    admitted_on: DateTime
    completed_on: DateTime
}


# Upsert Input Type #
input UpsertStudentInput {
    id: ID!
    applicationID: String! @trim
    examsNumber: String! @trim
    profile: ProfileOperation!
    academicYear: String! @trim
    programme: ProgrammeOperation!
    startLevel: Int!
    currentLevel: Int!
    endLevel: Int!
    paymentRecords: PaymentRecordsOperation
    enrollments: StudentEnrollmentsOperation
    remarks: String @trim
    admissionStatus: SelectOptionOperation
    admitted_on: DateTime!
    completed_on: DateTime
}

# Single Nested Mutations
input StudentOperation {
    create: CreateStudentInput
    connect: ID
    update: UpdateStudentInput
    upsert: UpsertStudentInput

}

# List Nested Mutations
input StudentsOperation {
    create: [CreateStudentInput!]
    connect: [ID!]
    update: [UpdateStudentInput!]
    upsert: [UpsertStudentInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}



# Query
extend type Query {
    student(id: ID! @eq): Student @find
    students: [Student!] @all
}

# Mutation
extend type Mutation {
    createStudent(input: CreateStudentInput! @spread): Student @create
    updateStudent(input: UpdateStudentInput! @spread): Student @update
    upsertStudent(input: UpsertStudentInput! @spread): Student @upsert
    deleteStudent(id: ID! @eq): Student @delete
}
