# Object Type
type Student {
    id: ID!
    surname: String!
    firstname: String!
    othernames: String
    picture: String
    dob: Date!
    gender: Gender!
    programme: Programme! @belongsTo
    paymentRecords: [PaymentRecord!]! @hasMany
    bookRecords: [BookRecord!]! @hasMany
    contact: Contact @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    # add more later
}

# Create Input Type
input StudentCreateInput {
    surname: String! @trim
    firstname: String! @trim
    othernames: String @trim
    picture: String @trim
    dob: Date!
    gender: Gender!
    programme: ProgrammeOperation!
    paymentRecords: [PaymentRecordOperations!]
    bookRecords: [BookRecordStudentOperations!]
    contact: ContactOperation!
}

# Update Input Type
input StudentUpdateInput {
    id: ID!
    surname: String @trim
    firstname: String @trim
    othernames: String @trim
    picture: String @trim
    dob: Date
    gender: Gender
    programme: ProgrammeOperation
    paymentRecords: [PaymentRecordOperations!]
    bookRecords: [BookRecordStudentOperations!]
    contact: ContactOperation
}

# Single Nested Mutations
input StudentOperation {
    create: StudentCreateInput
    connect: ID
    update: StudentUpdateInput
    upsert: StudentCreateInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Nested Mutations
input StudentOperations {
    create: [StudentCreateInput!]
    connect: ID
    update: [StudentUpdateInput!]
    upsert: [StudentCreateInput!]
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Query
extend type Query {
    student(id: ID! @eq): Student @find
    students: [Student!] @all
}

# Mutation
extend type Mutation {
    createStudent(input: StudentCreateInput! @spread): Student @create
    updateStudent(input: StudentUpdateInput! @spread): Student @update
    upsertStudent(input: StudentCreateInput! @spread): Student @upsert
    deleteStudent(id: ID! @eq): Student @delete
}
