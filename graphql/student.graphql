# Object Type
type Student {
    id: ID!
    profile: Profile @belongsTo
    programme: Programme! @belongsTo
    currentLevel: Int!
    paymentRecords: [PaymentRecord!] @hasMany
    bookRecords: [BookRecord!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
    # add more later
    # TODO: implement these
    ## groups: [Category!] @belongsToMany
    # schedules: [Schedule!] @hasMany
    # yearGroup: Batch
    # friends: Students
    # collegues: Students
}

# Create Input Type
input StudentCreateInput {
    profile: NestedProfileCreateInput!
    programme: NestedProgrammeCreateInput!
    currentLevel: Int!
    paymentRecords: NestedPaymentRecordsCreateInput
    bookRecords: NestedBookRecordsCreateInput
}

# Update Input Type
input StudentUpdateInput {
    id: ID!
    profile: NestedProfileUpdateInput
    programme: NestedProgrammeUpdateInput
    currentLevel: Int
    paymentRecords: NestedPaymentRecordsUpdateInput
    bookRecords: NestedBookRecordsUpdateInput
}

# Upsert Input Type #
input StudentUpsertInput {
    id: ID!
    profile: NestedProfileUpsertInput!
    programme: NestedProgrammeUpsertInput!
    currentLevel: Int!
    paymentRecords: NestedPaymentRecordUpsertInput
    bookRecords: BookRecordUpdateInput
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedStudentCreateInput {
    create: StudentCreateInput
    upsert: StudentUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedStudentUpdateInput {
    create: StudentCreateInput
    update: StudentUpdateInput
    upsert: StudentUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedStudentUpsertInput {
    create: StudentCreateInput
    upsert: StudentUpsertInput
    connect: ID
    sync: ID
}

# List Nested Mutations
# Nested List Create Input #
input NestedStudentsCreateInput {
    create: [StudentCreateInput!]
    upsert: [StudentUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedStudentsUpdateInput {
    create: [StudentCreateInput!]
    update: [StudentUpdateInput!]
    upsert: [StudentUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedStudentsUpsertInput {
    create: [StudentCreateInput!]
    upsert: [StudentUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query
extend type Query {
    student(id: ID! @eq): Student @find
    students: [Student!] @all
}

# Mutation
extend type Mutation {
    createStudent(input: StudentCreateInput! @spread): Student @create
    updateStudent(input: StudentUpdateInput! @spread): Student @update
    upsertStudent(input: StudentCreateInput! @spread): Student @upsert
    deleteStudent(id: ID! @eq): Student @delete
}
