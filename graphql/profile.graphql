# Object Type
type Profile {
    id: ID!
    # TODO: Create Account Type to replace user
    # A Profile can have more than one account
    # accounts: [Account] @hasMany
    profileType: SelectOption! @belongsTo
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: SelectOption @belongsTo
    contactInfo: ContactInfo
    contacts: [Contact] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

enum Gender {
    FEMALE @enum
    MALE @enum
}

# Create Input Type
input CreateProfileInput {
    # accounts: [Account] @hasMany
    profileType: SelectOptionOperation!
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: SelectOptionOperation
    contacts: ProfileContactsOperation
}

# Update Input Type
input UpdateProfileInput {
    id: ID!
    # accounts: [Account] @hasMany
    profileType: SelectOptionOperation
    picture: String
    title: String
    fullName: String
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: SelectOptionOperation
    contacts: ProfileContactsOperation
}

# Upsert Input Type
input UpsertProfileInput {
    id: ID!
    # accounts: [Account] @hasMany
    profileType: SelectOptionOperation!
    picture: String
    title: String
    fullName: String!
    lastName: String
    firstName: String
    middleName: String
    maidenName: String
    otherNames: String
    nickname: String
    prefix: String
    suffix: String
    dob: Date
    gender: Gender
    maritalStatus: SelectOptionOperation
    contacts: ProfileContactsOperation
}

# Single Nested Mutations
input ProfileOperation {
    create: CreateProfileInput
    connect: ID
    update: UpdateProfileInput
    upsert: UpsertProfileInput
}

# List Nested Mutations
input ProfilesOperation {
    create: [CreateProfileInput!]
    connect: [ID!]
    update: [UpdateProfileInput!]
    upsert: [UpsertProfileInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    profile(id: ID! @eq): Profile @find
    profiles: [Profile!] @all
}

# Mutation
extend type Mutation {
    createProfile(input: CreateProfileInput! @spread): Profile @create
    updateProfile(input: UpdateProfileInput! @spread): Profile @update
    upsertProfile(input: UpsertProfileInput! @spread): Profile @upsert
    deleteProfile(id: ID! @eq): Profile @delete
}
