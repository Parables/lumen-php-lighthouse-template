# Object Type #
type Book {
    id: ID!
    cover: String!
    title: String!
    bookCode: String!
    author: String
    inStock: Int!
    courses: [Course!] @belongsToMany
    bookRecords: [BookRecord!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Find/searach input #
input FindBookByInput {
    id: ID @eq
    title: String @trim @where(operator: "LIKE")
    bookCode: String @eq @trim
    author: String @trim @where(operator: "%LIKE%")
    inStock: Int @eq
}

# Create Input Type #
input BookCreateInput {
    title: String! @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: NestedCoursesCreateInput
    bookRecords: NestedBookRecordsCreateInput
}

# Update Input Type #
input BookUpdateInput {
    id: ID! @eq
    title: String @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: NestedCoursesUpdateInput
    bookRecords: NestedBookRecordsUpdateInput
}

# Upsert Input Type #
input BookUpsertInput {
    id: ID! @eq
    title: String! @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: NestedCoursesUpsertInput
    bookRecords: NestedBookRecordsUpsertInput
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedBookCreateInput {
    create: BookCreateInput
    upsert: BookUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedBookUpdateInput {
    create: BookCreateInput
    update: BookUpdateInput
    upsert: BookUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedBookUpsertInput {
    create: BookCreateInput
    upsert: BookUpsertInput
    connect: ID
    sync: ID
}

# Nested List  Mutations
# Nested List Create Input #
input NestedBooksCreateInput {
    create: [BookCreateInput!]
    upsert: [BookUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedBooksUpdateInput {
    create: [BookCreateInput!]
    update: [BookUpdateInput!]
    upsert: [BookUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedBooksUpsertInput {
    create: [BookCreateInput!]
    upsert: [BookUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query #
extend type Query {
    book(id: ID! @eq): Book @find
    books(findBy: FindBookByInput): [Book!]! @all
}

# Mutation #
extend type Mutation {
    createBook(input: BookCreateInput! @spread): Book @create
    updateBook(input: BookUpdateInput! @spread): Book @update
    upsertBook(input: BookUpsertInput! @spread): Book @upsert
    deleteBook(id: ID! @eq): Book @delete
}
