# Object Type
type Book {
    id: ID!
    cover: String
    title: String!
    bookCode: String
    author: String
    inStock: Int!
    courses: [Course!]! @belongsToMany
    bookRecords: [BookRecord!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type
input BookCreateInput {
    cover: String
    title: String!
    bookCode: String
    author: String
    inStock: Int!
    courses: CourseOperations
    bookRecords: BookRecordOperations
}

# Update Input Type
input BookUpdateInput {
    id: ID! @eq
    cover: String
    title: String
    bookCode: String
    author: String
    inStock: Int
    courses: CourseOperations
    bookRecords: BookRecordOperations
}

# Single Nested Mutations
input BookOperation {
    create: BookCreateInput
    connect: ID
    update: BookUpdateInput
    upsert: BookCreateInput
    delete: ID
    disconnect: ID
}

# List Nested Mutations
input BookOperations {
    create: [BookCreateInput!]
    connect: [ID!]
    update: [BookUpdateInput!]
    upsert: [BookCreateInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    book(id: Int! @eq): Book @find
    books(
        title: String @where(operator: "like")
        bookCode: String @eq
        author: String @where(operator: "%LIKE%")
        inStock: Int @eq
        courses: [Int!] @in(key: "book_course.")
    ): [Book!]! @all
}

# Mutation
extend type Mutation {
    createBook(input: BookCreateInput! @spread): Book @create
    updateBook(input: BookUpdateInput! @spread): Book @update
    upsertBook(input: BookCreateInput! @spread): Book @upsert
    deleteBook(id: ID! @eq): Book @delete
}
