# Object Type #
type Book {
    id: ID!
    cover: String
    title: String!
    bookCode: String
    author: String
    inStock: Int!
    courses: [Course!] @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Searach input #
input SearchBookInput {
    id: ID @eq
    title: String @trim @where(operator: "LIKE")
    bookCode: String @eq @trim
    author: String @trim @where(operator: "LIKE")
    inStock: Int @eq
}

# Create Input Type #
input CreateBookInput {
    title: String! @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: CoursesOperation
}

# Update Input Type #
input UpdateBookInput {
    id: ID! @eq
    title: String @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: CoursesOperation
}

# Upsert Input Type #
input UpsertBookInput {
    id: ID! @eq
    title: String! @trim
    cover: String @trim
    bookCode: String @trim
    author: String @trim
    inStock: Int
    courses: CoursesOperation
}

# Single Nested Mutations
input BookOperation {
    create: CreateBookInput
    connect: ID
    update: UpdateBookInput
    upsert: UpsertBookInput

}

# List Nested Mutations
input BooksOperation {
    create: [CreateBookInput!]
    connect: [ID!]
    update: [UpdateBookInput!]
    upsert: [UpsertBookInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query #
extend type Query {
    book(id: ID! @eq): Book @find
    books(input: SearchBookInput): [Book!]! @all
}

# Mutation #
extend type Mutation {
    createBook(input: CreateBookInput! @spread): Book @create
    updateBook(input: UpdateBookInput! @spread): Book @update
    upsertBook(input: UpsertBookInput! @spread): Book @upsert
    deleteBook(id: ID! @eq): Book @delete
}
