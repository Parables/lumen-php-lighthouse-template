# Object Type #
type Programme {
    id: ID!
    title: String!
    programmeCode: String
    startLevel: Int!
    endLevel: Int!
    fees(level: Int @eq): [Fee!] @hasMany
    programmeOutlines(level: Int @eq, semester: Int @eq): [ProgrammeOutline!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type #
input ProgrammeCreateInput {
    title: String! @trim
    programmeCode: String @trim
    startLevel: Int!
    endLevel: Int!
    fees: NestedFeesCreateInput
    programmeOutlines: NestedProgrammeOutlinesCreateInput
}

# Update Input Type #
input ProgrammeUpdateInput {
    id: ID!
    title: String @trim
    programmeCode: String @trim
    startLevel: Int
    endLevel: Int
    fees: NestedFeesUpdateInput
    programmeOutlines: NestedProgrammeOutlinesUpdateInput
}

# Upsert Input Type #
input ProgrammeUpsertInput {
    id: ID!
    title: String! @trim
    programmeCode: String @trim
    startLevel: Int
    endLevel: Int
    fees: NestedFeesUpsertInput
    programmeOutlines: NestedProgrammeOutlinesUpsertInput
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedProgrammeCreateInput {
    create: ProgrammeCreateInput
    upsert: ProgrammeUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedProgrammeUpdateInput {
    create: ProgrammeCreateInput
    update: ProgrammeUpdateInput
    upsert: ProgrammeUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedProgrammeUpsertInput {
    create: ProgrammeCreateInput
    upsert: ProgrammeUpsertInput
    connect: ID
    sync: ID
}

# List Nested Mutations
# Nested List Create Input #
input NestedProgrammesCreateInput {
    create: [ProgrammeCreateInput!]
    upsert: [ProgrammeUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedProgrammesUpdateInput {
    create: [ProgrammeCreateInput!]
    update: [ProgrammeUpdateInput!]
    upsert: [ProgrammeUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedProgrammesUpsertInput {
    create: [ProgrammeCreateInput!]
    upsert: [ProgrammeUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query
extend type Query {
    Programme(id: ID! @eq): Programme @find
    Programmes: [Programme!] @all
}

# Mutation
extend type Mutation {
    createProgramme(input: ProgrammeCreateInput! @spread): Programme @create
    updateProgramme(input: ProgrammeUpdateInput! @spread): Programme @update
    upsertProgramme(input: ProgrammeUpsertInput! @spread): Programme @upsert
    deleteProgramme(id: ID! @eq): Programme @delete
}
