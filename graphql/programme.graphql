# Object Type #
type Programme {
    id: ID!
    title: String!
    programmeCode: String
    startLevel: Int!
    endLevel: Int!
    programmeOutline: [ProgrammeOutline!]
    created_at: DateTime!
    updated_at: DateTime!
}

type ProgrammeOutline {
    level: Int!
    fees: [Fee!] @hasMany
    semesters: [Semester!]!
}

type Semester {
    semesterType: SelectOption! @belongsTo
    courses: [SemesterCourse!]!
}

type SemesterCourse {
    course : Course! @belongsTo
    elective: Boolean
}

input ProgrammeOutlineInput {
    level: Int!
    fees: FeesOperation
    semesters: [SemesterInput!]!
}

input SemesterInput {
    semesterType: SelectOptionOperation!
    courses: [SemesterCourseInput!]!
}

input SemesterCourseInput {
    course : CourseOperation!
    elective: Boolean
}

# Create Input Type #
input CreateProgrammeInput {
    title: String! @trim
    programmeCode: String @trim
    startLevel: Int!
    endLevel: Int!
    programmeOutline: [ProgrammeOutlineInput]
}

# Update Input Type #
input UpdateProgrammeInput {
    id: ID!
    title: String @trim
    programmeCode: String @trim
    startLevel: Int
    endLevel: Int
    programmeOutline: [ProgrammeOutlineInput]
}

# Upsert Input Type #
input UpsertProgrammeInput {
    id: ID!
    title: String! @trim
    programmeCode: String @trim
    startLevel: Int
    endLevel: Int
    programmeOutline: [ProgrammeOutlineInput]
}

# Single Nested Mutations
input ProgrammeOperation {
    create: CreateProgrammeInput
    connect: ID
    update: UpdateProgrammeInput
    upsert: UpsertProgrammeInput
}

# List Nested Mutations
input ProgrammesOperation {
    create: [CreateProgrammeInput!]
    connect: [ID!]
    update: [UpdateProgrammeInput!]
    upsert: [UpsertProgrammeInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    programme(id: ID! @eq): Programme @find
    programmes: [Programme!] @all
}

# Mutation
extend type Mutation {
    createProgramme(input: CreateProgrammeInput! @spread): Programme @create
    updateProgramme(input: UpdateProgrammeInput! @spread): Programme @update
    upsertProgramme(input: UpsertProgrammeInput! @spread): Programme @upsert
    deleteProgramme(id: ID! @eq): Programme @delete
}
