type Programme {
    id: ID!
    title: String!
    programmeCode: String!
    startLevel: Int!
    endLevel: Int!
    programmeOutline: [ProgrammeOutline!]! @belongsTo
    createdAt: DateTime!
    updatedAt: DateTime!
}

input ProgrammeInput {
    id: ID
    title: String
    programmeCode: String
    startLevel: Int
    endLevel: Int
    programmeOutline: [ProgrammeOutlineOperations!]
}


# Single Nested Mutations
input ProgrammeOperation {
    create: ProgrammeInput!
    connect: ID!
    update: ProgrammeInput!
    upsert: ProgrammeInput!
    sync: ID!
    syncWithoutDetaching: ID!
    delete: ID!
    disconnect: ID!
}

# List Nested Mutations
input ProgrammeOperations {
    create: [ProgrammeInput!]
    connect: ID!
    update: [ProgrammeInput!]
    upsert: [ProgrammeInput!]
    sync: ID!
    syncWithoutDetaching: ID!
    delete: ID!
    disconnect: ID!
}

# Query
extend type Query {
    Programme(id: Int! @eq): Programme @find
    Programmes: [Programme!] @all
}

# Mutation
extend type Mutation {
    createProgramme(input: ProgrammeInput! @spread): Programme @create
    updateProgramme(input: ProgrammeInput! @spread): Programme @update
    upsertProgramme(input: ProgrammeInput! @spread): Programme @upsert
    deleteProgramme(id: ID! @eq): Programme @delete
}
