type Programme {
    id: ID!
    title: String!
    programmeCode: String
    startLevel: Int!
    endLevel: Int!
    fees(level: Int @eq): [Fee!] @hasOne
    programmeOutline(level: Int @eq, semester: Int @eq): [ProgrammeOutline!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

input ProgrammeCreateInput {
    title: String! @trim
    programmeCode: String @trim
    startLevel: Int!
    endLevel: Int!
    fees: FeeOperations
    programmeOutline: ProgrammeOutlineOperations
}

input ProgrammeUpdateInput {
    id: ID!
    title: String @trim
    programmeCode: String @trim
    startLevel: Int
    endLevel: Int
    fees: FeeOperations
    programmeOutline: ProgrammeOutlineOperations
}

# Single Nested Mutations
input ProgrammeOperation {
    create: ProgrammeCreateInput
    connect: ID
    update: ProgrammeUpdateInput
    upsert: ProgrammeCreateInput
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# List Nested Mutations
input ProgrammeOperations {
    create: [ProgrammeCreateInput!]
    connect: [ID!]
    update: [ProgrammeUpdateInput!]
    upsert: [ProgrammeCreateInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Query
extend type Query {
    Programme(id: ID! @eq): Programme @find
    Programmes: [Programme!] @all
}

# Mutation
extend type Mutation {
    createProgramme(input: ProgrammeCreateInput! @spread): Programme @create
    updateProgramme(input: ProgrammeUpdateInput! @spread): Programme @update
    upsertProgramme(input: ProgrammeCreateInput! @spread): Programme @upsert
    deleteProgramme(id: ID! @eq): Programme @delete
}
