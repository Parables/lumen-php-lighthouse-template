# Object Type #
type Course {
    id: ID!
    title: String!
    courseCode: String
    creditHours: Int
    books: [Book!] @belongsToMany
    # TODO: Implement Timetable
    # schedule(level: Int): [Schedule!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

# Create Input Type #
input CourseCreateInput {
    title: String! @trim
    courseCode: String @trim
    creditHours: Int
    books: NestedBooksCreateInput
    # schedules: NestedSchedulesCreateInput
}

# Update Input Type #
input CourseUpdateInput {
    id: ID!
    title: String @trim
    courseCode: String @trim
    creditHours: Int
    books: NestedBooksUpdateInput
    # schedules: NestedSchedulesUpdateInput
}

# Upsert Input Type #
input CourseUpsertInput {
    id: ID!
    title: String! @trim
    courseCode: String @trim
    creditHours: Int
    books: NestedBooksUpsertInput
    # schedules: NestedSchedulesUpsertInput
}

# Nested Single  Mutations
# Nested Single Create Input #
input NestedCourseCreateInput {
    create: CourseCreateInput
    upsert: CourseUpsertInput
    connect: ID
    sync: ID
}

# Nested Single Update Input #
input NestedCourseUpdateInput {
    create: CourseCreateInput
    update: CourseUpdateInput
    upsert: CourseUpsertInput
    connect: ID
    sync: ID
    syncWithoutDetaching: ID
    delete: ID
    disconnect: ID
}

# Nested Single Upsert Input #
input NestedCourseUpsertInput {
    create: CourseCreateInput
    upsert: CourseUpsertInput
    connect: ID
    sync: ID
}

# List Nested Mutations
# Nested List Create Input #
input NestedCoursesCreateInput {
    create: [CourseCreateInput!]
    upsert: [CourseUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Nested List Update Input #
input NestedCoursesUpdateInput {
    create: [CourseCreateInput!]
    update: [CourseUpdateInput!]
    upsert: [CourseUpsertInput!]
    connect: [ID!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

# Nested List Upsert Input #
input NestedCoursesUpsertInput {
    create: [CourseCreateInput!]
    upsert: [CourseUpsertInput!]
    connect: [ID!]
    sync: [ID!]
}

# Query #
extend type Query {
    course(id: ID! @eq): Course @find
    courses(title: String @where(operator: "%LIKE%")): [Course!]! @all
}

# Mutation #
extend type Mutation {
    createCourse(input: CourseCreateInput! @spread): Course @create
    updateCourse(input: CourseUpdateInput! @spread): Course @update
    upsertCourse(input: CourseCreateInput! @spread): Course @upsert
    deleteCourse(id: ID! @eq): Course @delete
}
